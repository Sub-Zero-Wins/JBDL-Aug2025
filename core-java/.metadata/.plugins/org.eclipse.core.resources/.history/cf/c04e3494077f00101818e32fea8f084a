package multithreading;

import java.util.Iterator;

class VideoStreaming extends Thread
{
	@Override
	public void run()
	{
		System.out.println("video streaming start");
		for (int i = 0; i < 5; i++) 
		{
		System.out.println("video playing...");
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			
			e.printStackTrace();
		}	
		}
		System.out.println("video streaming end");
	}
	
}
class CommentReading  extends Thread
{
	@Override
	public void run()
	{
		System.out.println("comment reading start");
		for (int i = 97; i <= 101; i++) 
		{
		System.out.println("comments ..."+(char)i);
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		}
		System.out.println("comment reading end");
	}
	
}
class VideoDownloading  extends Thread
{
	@Override
	public void run()
	{
		System.out.println("video download start");
		for (int i = 0; i <= 100; i=i+10) 
		{
		System.out.println("downloading ..."+i+"%");
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		}
		System.out.println("video download complete");
	}
}



public class YoutubeDemo 
{
	public static void main(String[] args) throws InterruptedException
	{
		
		
		
		
		
		
		
		
	}

}
