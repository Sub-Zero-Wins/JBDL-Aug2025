Java
----
-> Java is a robust programming language
-> It has high security
-> Its a portable programming(can be compiled on one system and executed on any other system)
-> Its rich in features
-> IT industry is predominantly using java
   Banking, Financial Services and Insurance (BFSI)-> are using java

Java architecture
-------------------
Jvm + Jre + Lib + dev tools = jdk


JVM architecture
-----------------


--------------------------------------------------------------------------------------------------

Java Data types
----------------

Primitive
----------(not objects)

byte     1   -128 to 127
short    2   -32,768 to 32,767
int      4   -2,147,483,648 to 2,147,483,647.
long     8   -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.

float(IEEE)    4    -  3.14f, -1.23e-10f    ~6-7 significant decimal digits
double(IEEE)   8    -  3.1415d, 1.23e100d   ~15-16 significant decimal digits
 
char           2    -  2^16 65536
boolean        1    -  true false



Non Primitive
--------------(Objects)

String
+
Wrapper classes

Byte     1   -128 to 127
Short    2   -32,768 to 32,767
Integer      4   -2,147,483,648 to 2,147,483,647.
Long     8   -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.

Float(IEEE)    4    -  3.14f, -1.23e-10f    ~6-7 significant decimal digits
Double(IEEE)   8    -  3.1415d, 1.23e100d   ~15-16 significant decimal digits
 
Character           2    -  2^16 65536
Boolean        1    -  true false
+
User defined objects


---------------------------------------------------------------------


loops and conditional statements
---------------------------------


loops
----

for 

for(initialization;condition;updation)


while
  
 
do while


conditional
----------

if elseif else

switch

----------------------
HW
----
Operators in java
------------------

Methods
--------
A named body which is set of instructions that performs a task and returns a value.

returntype methodName() // mandatory
{
}


method overloading/ Static polymorphism / virtual polymorphism /compile-time polymorphism
------------------------------------------------------------------------------------------

writing multiple methods with same name and different signatures

signature= 1) type of parameter/argument
           2) order of parameter/argument
           3) number of parameter/argument


HW 
---

Build a calculator(by taking user input from console)
--------------------------------------------------------
-> use do while loop create a menu
-> take input using scanner and use switch case to store various logic
-> give console based result and continue till user exits the menu


OOPS
----

OBJECT ORIENTED PROGRAMMING
----------------------------

Its a programming paradigm(style) which treats every thing in the business as an object in the program.


Customer
Product 
Category
Cart
Payment
Delivery


Objects/Entity
---------------
Are entities which have their own state and behaviour
Objects are created inside the heap memory

Class
------
is a java definition block which defines the states and behaviour of an object
class is aka blue print of an object
class doesn't exist in reality(in memory) object exists in reality.


What all things can be written inside a class ?
 
1. declare and initialize static and non static variables
2. declare and define static and non static methods
3. Constructors
4. Static/non Static Blocks
5. nested class and interface


1. Accessing static variables and methods

   syntax ClassName.memberName

2. Accessing non static members
    
  syntax   ClassName refVariable = new ClassName();


note static and non static variables are initialized by default values by the jvm



types of variables

1. non static / instance/object variable (default value by jvm can be used without initialization)

2. static  / class variable (default value by jvm can be used without initialization)

3. local   variable (No default value by jvm cannot be used without initialization)


NOTE:
 //non static variables cannot be directly accessed inside static bodies(methods/blocks)  can only be accessed by object creation

Since static members get memory first, non static members are not allowed directly inside static members
without object creation

2 ways to initialize object
-----------------------------

initialize means give values to object variables.

1. Constructors (used widely)
2. Non static Blocks (not used much)


2. Constructors 
 These are special types of method which have same name as that of class name
 they do have return type
 they don't accept modifiers like static , final, synchronized strictfp etc

 Constructors are used to initialize objects

 Every Class has a default constructor introduced by the compiler
 
 which will always be empty (no args constructor , 0 parametrized constr.)

 Constructors are called when we create objects (when we instantiate a class)

 syntax = accessmodifer ClassName(){}

Constructors can be overloaded

i.e writing multiple construstors with different signatures

signature = 1. Type 
            2. order
            3. number of params


This keyword
-------------

This keyword is used to refer to the current object
this is used when ever local variable names are same as instance variable names(shadowing problem)
this is used to overcome shadowing problem i.e in a {} local variables are given preference hence
this is used to point to instance variables of a class.


Blocks
------

1. static block
    
   static blocks are executed even before main method    

2. non static block

   non static block will executed before a constructor executes
 
 
 Flow of execution Of Java Program
---------------------------------------

1 . write code and compile to bytecode and give byte code to jvm for execution
2 . Class Loading activity (place all static members in metaspace) 
3 . execute static block if exists
4 . execute main if exists
5 . you can access all static members now becase they have been allocated memory
6 . create object if required (new key word creates object)
7 . executes non static block if exists
8 . executes constructor and initializes objects
9 . access all non static memebers required as they have been allocated memory
10. main method end


IT Standards
------------


1. Name conventions

   ClassName/Interface/Enum is in Pascal Case (every word 1st letter is upper case)

   methodName is in camelCase(first word 1st letter is lower case consecutive word 1st letter upper case)
   
   variableName is also in camelCase
 
   CONSTANT_NAMES is in ALL_CAPS separated by underscores

2. Single Class inside a source file(except nested classes)
  
 

---------------------------------------------------------------------------------------------------------

Pillars of Object Oriented Programming
---------------------------------------

1. inheritance
   ------------

   its the phenomenon in which one class acquires the properties of another class
   class which gives properties is called parent/super/base class
   class which takes properties is called child/sub/derived class

   
   Levels/Types of inheritance  
   ---------------------------
  1. single level
  2. multilevel
  3. hierarchical
  4. hybrid

   disallowed inheritance
   -------------------------

  5. multiple
  6. cyclic inheritance
 
important conclusions
----------------------

1.  every class in java is a subclass of Object class directly or indirectly

2.  a class is never empty after compilation compiler will add extends Object (if class already in not extending)
    and add default constructor (if you have not written a default constructor) and inherits 9 methods from object class

3.  private members , constructors , blocks , nested classes do not get inherited


this

this()
-----
used to call constructors within a class
one cosntr will execute only once for one object
i.e recursive constr  invocation is not allowed
this() should always be the 1st line inside a constr body.


super()
-------
super() calls parent class constructor
should always be the 1st line inside a constr body.
compiler by default adds super() emty args of parent class has empty args constructor (implicit constructor chaining)
if parent class constructor has args we have to perform constructor chaining explicitly

super
-----

used to resolve name conflict of immediate super classes member name is same


Access modifiers
---------------------

private   - private members (variable/methods) can only be accessed within the class they are declared in
default   - aka package level access modifier, you can only access this inside the package its declared in
protected - same as default + can access outside the package if inheritance exists
public    - can be accessed across the project by importing


note for a class you can only give public/default access modifiers
and source file name should be same as public class name;

Object Class Methods.
----------------------

1. hashcode(): -
    integer number calculated for each object address
    can be overridden in the subclass 
   


2. equals():   -
    equals method of object class compare 2 objects based on hashcode
    can be overridden in the subclass to compare based on content of the objects.



3. toString(): - objectClassMethods.Demo@5ca881b5
    Object class to string method returns fullyQualifiedname@hexadecimalAddressOfTheObject
    can be overridden in the subclass if we want to display contents of the object
    




2. encapsulation
----------------
   Encapsulation is oop fundamental that involves bundling data (private vars) and methods (public getter/setter) as a single unit.




3. polymorphism
----------------
   poly=many morph=form
    
   Its the ability of an object to show different forms in different stages

   2 Types
   
1.CompileTime/virtual/static polymorphism  : example- method/constr overloading

  where binding of method declaration with method definition happens during the compile time

2.Runtime/Real/dynamic polymorphism        : example- method overriding

  where binding of method declaration with method definition happens during the runtime


Method Overriding.
--------------------
If a child class is unhappy with the parent class implementation of the method, it has all rights to change the implementation
by overriding it

rules

1. name and parameters should be same 

2. primitive return types cannot be changed
   non primitive return types can be co variant but not contra variant

3. access modifiers visibility can be kept same or increased but cannot be decreased

parent:    	public        protected   default      private

child:      	public        protected   default      cannot be overridden(because cannot be inherited)
                              public      protected
                                          public
        
not allowed: 	protected     default     private
                default       private
                private

   
3.  private/static/final methods cannot be overridden
    
    private- cannot be overridden(because cannot be inherited)
    static - cannot be overridden(because its class level method not object level)
    final  - cannot be overridden(because cannot be modified)

                final->class    -> cannot be inherited
		final->variable -> cannot be reassigned
		final->method   -> cannot be overridden
                  



4. abstraction
---------------

Abstraction is the process if presenting only the essential features of an objector a system while hiding the complex underlying implementation details. It allows developers to work with simplified representations making code easier to design implement and  maintain.

Types of methods

1. concrete method impl.
------------------------

public void m1() // declaration
{
  SOP("hello world") // defn /impl
}

2. empty method impl.
------------------------

public void m1() // declaration
{
 //empty
}

3. asbtract method .
------------------------

abstract public void m1(); // declaration


Types of classes
---------------


1. concrete class
--------------------
  class Demo{
    // all concrete methods
 }

2.abstract  class
--------------------
 abstract class Demo{
    // 99 concrete methods
    // 1 abstract method
 }

Note: abstract classes cannot be instantiated

Upcasting :
parent type of ref pointing to child object.
it can access only inherited and overridden methods
it promotes loose coupling and code reuseability

Downcasting:
 we can only downcast an upcasted object
 downcasting is used to access the special methods of the children classes

---------------------------------------------------------------------------------

interfaces
----------

Interfaces are purely abstract bodies
interfaces cannot be instantiated
all methods are by default public and abstract
all variables are public static and final

important points to remember
----------------------------

1. interfaces can extends interfaces and even multiple inheritance is allowed(no constructor chaining problem because no constr in interfaces)

2. extends kw -can only exist between 2 interfaces or 2 class . Class and interface cannot extends each other
   implements kw -only a class can implement an interface.

3. one class can implement multiple interfaces

4. one interface can be implemented by multiple classes

5. on class can extends another class and implement other interfaces at the same time

  syntax :
  
  class A extends B implements Itr1,Itr2 // correct syntax
  class A  implements Itr1,Itr2 extends B// incorrect syntax

6. a class extending another class and implementing another interface can suffice the implementation if the method also exists in     another class with same name as in the interface

7. an empty interface is called as a marker interface

8. an interface with only one abstract method is called as functional interface



Aggregation Composition (HAS-A relationship)
---------------------------------------------


Exception Handling
-------------------
 
Exception : an unwanted error that we encounter during runtime which disrupts the normal flow of execution of a program


try catch finally throw and throws.



HW exp handling
------------------

Valid invalid syntaxes of try catch finally
Create custom exception insufficient funds and throw it from a minor banking app



-----------------------------------------------------------------

Multithreading
---------------

HW
---



Arrays
-------

HW :
2 sum problem



Strings
-------

Strings in java are objects
its sequence characters

2 types of string
-----------------


->immutable string
--------------------
non changeable

String
------


->mutable string
--------------------
changeable

StringBuilder/StringBuffer
---------------------------


Boxing/wrapping and Unboxing/unwrapping
-------------------------------------

boxing is converting primitive to non primitive (auto boxing / explicit boxing)

unboxing is converting non primitive to  primitive (auto unboxing / explicit unboxing)



Collections
------------

Drawbacks of arrays
--------------------


1. fixed in size.

2. homogenous data only

3. demand continuous memory

------------------------------

COLLECTION
------------

a group of individual objects represented as a single entity
all elements are wrapper classes no primitives.

1. Collection (I)
------------------
Collection is the root interface of all collection classes it has around 19 methods that are inherited by the collection classes


2. List
--------
When ever we want to represent a group of individual objects as a single entity where duplicates are allowed and insertion order is preserved

1. ArrayList
    - underlying data is dynamic array
    - array list demands continuous memory
    - fast for read operations as it implements RandomAccess interface
    - slower for insertion and deletion because of shift operation in continuous memory
   



2. LinkedList
   - underlying data structure is doubly linked list
   - makes use of discrete memory
   - fast of insert delete operations
   - slower in read

3. Vector
   - legacy class same as arraylist with some old methods
   - all methods are synchronized

4. Stack
    - legacy class with push and pop operations following LIFO order



3.  Set
------------

When ever we want to represent a group of individual objects as a single entity where duplicates are not allowed and insertion order is not preserved

1. HashSet
    underlying ds is hashtable
    best for searching operations
    duplicates not allowed
    insertion order is not preserved

2. LinkedHashSet
    underlying ds is hashtable + linked list
    same as hashset

3. TreeSet
    underlying ds is red black tree / balanced tree
    elements must be homogenous and comparable
    NOTE: elements in java are said to be comparable if they implement Comparable Interface.
    




Maps
----
When ever we want to represent a group of individual objects as key value pair

keys are unique
objects can be duplicate

key value pair is called as an entry



HW-> Iteration on map / queue



Generics advantages
-------------------

1. promotes type safety
2. improvises code reusability
3. prevents type casting
----------------------------------------------------------------------------------------------

java8 features
--------------

default static methods  + java 9 (private methods)
---------------------------------------------------

default methods-

-declared using default kw in an interface 
-default methods are introduced in an interface to add new features without breaking the code
-if any class wants to override it , it can override that method
-a class with SAM is a functional interface even with multiple default/static/private methods.

static methods-
 -can create general utility methods
 -can only be accessed using InterfaceName.staticMethodName(); // only allowed syntax
 -can even run main method in an interface
 
private method (java 9)
 - private static methods can be used for code reusability inside interfaces.




optional class
---------------

Functional Interfaces
---------------------
SAM

Lambda expressions
-------------------

lambda calculus 1930s to reduce the length of complex math expressions



LISP first programming lang.



Lambda expressions are anonymous functions

- no name
- no return type
- no modifier


1. 

public void m1()
{
 System.out.print("hello");
}

lambda eqv.
-----------

()->{
 System.out.print("hello");
 
 };

()-> System.out.print("hello");  // one liner can omit {}

2. 

public void add(int x, int y)
{
  System.out.print(x+y);
}

lambda eqv.
-----------

(int x, int y)->
{
  System.out.print(x+y);
};

(int x, int y)-> System.out.print(x+y);

(x,y)-> System.out.print(x+y); // param types can be omitted 


3.

public int add(int x, int y)
{
  return x+y;
}

lambda eqv.
-----------

(int x,int y)->{ return x+y; } ;

(x,y)->{ return x+y; } ;

(x,y)->  x+y ; // return and {} either exist together or are removed together in single line statements.



4. 
public int square(int n)
{
  return n*n;
}


lambda eqv
----------

 (n)->{
  return n*n;
};

 n->n*n; // if only one parameter the () can be omitted.


-------------------------------------------------------------------------------------------------------------------


1. (x,y)-> return x+y; // invalid 

2. (x,y)-> {System.out.print(x+y);} // invalid

3. (x,y)-> {System.out.print(x+y)}; //invalid

4. (x,y)-> {return x+y}; // invalid

5. (x,y)-> x+y; // valid

6. (x,y)-> {x+y;}; // invalid 

7. (y)->{ return x+y;}; // valid

8. x,y-> x+y;// invalid

9.  -> x+y ;// invalid


-----------------------------------------------------------------------------------------------------------------------

Lambda expressions can only be used in functional interfaces.


benefits
--------

1. concise syntax
2. brings in benefits of functional programming making code more readable
   i.e methods can be passed as arguments to other method

3. java provides inbuild generic functional interfaces for simple day to day tasks

java.util.function package


Predicate - used for Boolean condition checks

Function - used when we want to give some input and expect an output

Consumer - to pass some input and not return any thing

Supplier



stream API
-----------

used to process data sets and perform operations using inbuild functions

2 types of operations in stream api

intermediate operations - lazy executed , means until you do not perform terminal operations it wont execute
example filter,map,sort etc

terminal operations - 
example collect,forEach


method and constructor referencing
----------------------------------

::


joda time API
--------------


HW
---
IO streams
Serialization


Enums
------

defining a set of constants

Byte data = -128 0 +127 
-128,-127,-126,-3-2-1 0 1 2 3 127


Color colour ;
RED BLUE BREEN YELLOW

AccountType
 BRONZE SILVER GOLD PLATINUM
 
 SVNGS_ACCOUNT CURRENT_ACCOUNT

--------------------------------------------------------------------------------------------------------------------


























jdbc
----

springboot
-----------

microservices
--------------















































